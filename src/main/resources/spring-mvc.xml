<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置扫描的包，com.bluewind.base.**.controller下面得所有类以及所有子包下面的所有类-->
    <context:component-scan base-package="com.bluewind.base.**.controller" use-default-filters="false">
        <!--只扫描controller,实际开发中最好用这种方式来写，这边MVC就只扫描controller，就不会IOC那边冲突，否则事务会被覆盖，IOC那边就要排除这个controller-->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <context:annotation-config/>

    <!--启动aop注解基于类的代理（这时需要cglib库），如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理将起作用-->
    <aop:config proxy-target-class="true"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--启用MVC的注解-->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--避免IE浏览器执行AJAX时，返回JSON出现下载文件-->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json</value>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!--配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />
        <!-- 上传文件最大值 -->
        <property name="maxUploadSize" value="10485760000"/>
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960"/>
        <!-- 启用是为了推迟文件解析，以便捕获文件大小异常 -->
        <property name="resolveLazily" value="true"/>
    </bean>

    <!--配置视图解析器，这里使用thymeleaf-->
    <bean id="templateResolver" class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="/WEB-INF/templates/"/>
        <property name="suffix" value=".html"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="order" value="1"/>
        <property name="templateMode" value="HTML"/>
        <property name="cacheable" value="false"/>
    </bean>
    <bean id="templateEngine" class="org.thymeleaf.spring5.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver"/>
    </bean>
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine"/>
        <property name="characterEncoding" value="UTF-8"/>
    </bean>

    <!-- 配置i18n国际化 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 找不到key时用key作为返回值 -->
        <property name="useCodeAsDefaultMessage" value="false"/>
        <!-- 资源刷新时间 -->
        <property name="cacheSeconds" value="60"/>
        <!-- 资源文件列表 -->
        <property name="basenames">
            <list>
                <value>classpath:i18n/messages</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <!-- 配置swagger -->
    <bean id="swagger2Config" class="com.bluewind.base.common.config.SwaggerConfig"/>

    <!--配置静态资源过滤，不然静态资源比如css是访问不到的-->
    <mvc:default-servlet-handler/>

    <!-- 配置静态资源，不被DispatcherServlet处理，增加缓存时间10秒 -->
    <mvc:resources mapping="/favicon.ico" location="/favicon.ico"/>
    <mvc:resources mapping="/resources/**" location="/resources/" cache-period="10"/>
    <mvc:resources mapping="/skin/**" location="/skin/" cache-period="10"/>
    <mvc:resources mapping="/skins/**" location="/skins/" cache-period="10"/>
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>
    <mvc:resources mapping="/swagger-ui.html" location="classpath:/META-INF/resources/"/>
    <mvc:resources mapping="/doc.html" location="classpath:/META-INF/resources/"/>
    <mvc:resources mapping="/global-login.html" location="classpath:/META-INF/resources/"/>


    <!-- 拦截器的注册 -->
<!--    <mvc:interceptors>-->
<!--        <mvc:interceptor>-->
<!--        </mvc:interceptor>-->
<!--    </mvc:interceptors>-->


    <!-- 配置跨域请求 -->
    <mvc:cors>
        <mvc:mapping path="/**"
                     allowed-origins="*"
                     allowed-methods="GET, HEAD, POST, PATCH, PUT, DELETE, OPTIONS"
                     allowed-headers="ticket,digest,Origin,Accept,Content-Type,X-Requested-With,Transfer-Encoding,Date,status,Server"
                     exposed-headers="ticket,digest,Origin,Accept,Content-Type,X-Requested-With,Transfer-Encoding,Date,status,Server"
                     allow-credentials="true"
                     max-age="3600" />
        <mvc:mapping path="/resources/**" allowed-origins="*" />
    </mvc:cors>

</beans>
