<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--配置主数据源-->
    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--配置JDBC基础属性，即数据库连接相关配置-->
        <property name="driverClassName" value="${master.jdbc.driver}"/>
        <property name="url" value="${master.jdbc.url}"/>
        <property name="username" value="${master.jdbc.username}"/>
        <property name="password" value="${master.jdbc.password}"/>

        <!--配置连接池的设置,这个是要根据真实项目情况来配置的，随着项目的发展会不断修改-->
        <!--配置初始化大小、最小、最大-->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- mysql校验语句 -->
        <property name="validationQuery" value="SELECT 1 "/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超时时间，单位为秒。180秒=3分钟 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 关闭abanded连接时输出错误日志-->
        <property name="logAbandoned" value="true"/>
    </bean>

    <bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--配置JDBC基础属性，即数据库连接相关配置-->
        <property name="driverClassName" value="${slave.jdbc.driver}"/>
        <property name="url" value="${slave.jdbc.url}"/>
        <property name="username" value="${slave.jdbc.username}"/>
        <property name="password" value="${slave.jdbc.password}"/>

        <!--配置连接池的设置,这个是要根据真实项目情况来配置的，随着项目的发展会不断修改-->
        <!--配置初始化大小、最小、最大-->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- mysql校验语句 -->
        <property name="validationQuery" value="SELECT 1 "/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>


    <!-- 配置动态数据源 -->
    <bean id="dataSource" class="com.bluewind.base.common.config.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- 可配置多个数据源 -->
                <entry value-ref="masterDataSource" key="masterDataSource"/>
                <entry value-ref="slaveDataSource" key="slaveDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
    </bean>


    <!--
        配置是MyBatis的SqlSessionFactory，这一块配置将Spring和Mybatis整合到了一起
        如果不配置这里，则mapper接口只能通过SqlSession来获取，十分麻烦。这里配置好后就可以通过Spring IoC来获取mapper接口了
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--加载mybatis全局设置，classpath即我们的资源路径resources-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--配置Mybatis的映射xml文件路径-->
        <property name="mapperLocations">
            <list>
                <value>classpath:mapper/*/*Mapper.xml</value>
                <value>classpath*:com/bluewind/**/mapper/*Mapper.xml</value>
            </list>
        </property>
    </bean>


    <!--配置DatabaseIdProvider，用于在xml判断数据源类型-->
    <!--  _databaseId可用于判断数据源类型，如：<if test="_databaseId=='oracle'">DUAL</if>，_databaseId有如下值：mysql、mysql、db2、h2、postgresql、UnKown-->
    <!--  注意：_databaseId的值只会是默认数据源，不会随着切换的数据源改变而改变。-->
    <!--  _databaseId还有一种用法,如下所示-->
    <!--  <mapper namespace="com.ali.pims.dao.UserDao">-->
    <!--    <select id="count"  resultType="long" databaseId="MySQL">-->
    <!--         SELECT COUNT(1) FROM t_user-->
    <!--    </select>-->
    <!--    <select id="count"  resultType="long" databaseId="Oracle">-->
    <!--         SELECT COUNT(1) FROM t_user-->
    <!--    </select>-->
    <!--  </mapper>-->
    <!--  如果当前数据源是oracle则执行databaseId="Oracle"的语句，如果是mysql则执行databaseId="MySQL"的语句-->
    <bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="Oracle">oracle</prop>
                <prop key="MySQL">mysql</prop>
                <prop key="PostgreSQL">postgresql</prop>
                <prop key="DB2">db2</prop>
                <prop key="SQL Server">sqlserver</prop>
                <prop key="H2">h2</prop>
            </props>
        </property>
    </bean>
    <bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
        <property name="properties" ref="vendorProperties" />
    </bean>


    <!--指定Mybatis的mapper接口扫描包-->
    <!--注意！！！如果用的是tk.mybatis自动生成的mapper接口，一定要将org.mybatis.改成tk.mybatis-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定刚才我们配置好的sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定mapper接口扫描包-->
        <property name="basePackage" value="com.bluewind.base.**.mapper"/>
    </bean>

    <!--配置事务管理器，如果不配置这个，不启动事务扫描的话，那么发生了异常也不会触发回滚-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--还得数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置 transactionTemplate，用于编程式事务-->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!--配置jdbcTemplate并注入数据源-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--启动注解事务-->
    <tx:annotation-driven/>
</beans>
